# Loading and cleaning data from source
col_names <- c('country', 'year', 'status', 'life_expectancy', 'adult_mortality',
'infant_deaths', 'alcohol', 'percent_expend', 'hep_b', 'measles',
'bmi', 'deaths_under5', 'polio', 'total_expend', 'diptheria', 'hiv_aids',
'gdp', 'population', 'thin_1_19', 'thin_5_9', 'income_comp', 'schooling')
data <- read_csv('data/life_expectancy_raw.csv',
col_names = TRUE,
col_types = cols(population = col_double()),
trim_ws = TRUE)
# install.packages("rmarkdown")
# install.packages("readr")
# install.packages("leaps")
# install.packages("corrplot")
# install.packages("tseries")
library(readr)
library(leaps)
library(corrplot)
library(tseries)
# Loading and cleaning data from source
col_names <- c('country', 'year', 'status', 'life_expectancy', 'adult_mortality',
'infant_deaths', 'alcohol', 'percent_expend', 'hep_b', 'measles',
'bmi', 'deaths_under5', 'polio', 'total_expend', 'diptheria', 'hiv_aids',
'gdp', 'population', 'thin_1_19', 'thin_5_9', 'income_comp', 'schooling')
data <- read_csv('data/life_expectancy_raw.csv',
col_names = TRUE,
col_types = cols(population = col_double()),
trim_ws = TRUE)
colnames(data) <- col_names
head(data, 10) #view first 10 rows
# Picking data from one year- try most recent year
data_2015 = data[data$year == 2015, ] # Most recent year available
missing_2015 <- colSums(is.na(data_2015))
print("Columns with more than 10% missing data for 2015:")
print(missing_2015[missing_2015 > 18])
# Two predictors with data mostly incomplete- try the next most recent year
data_2014 = data[data$year == 2014, ] # Next most recent year
missing_2014 <- colSums(is.na(data_2014))
print("Columns with more than 10% missing data for 2014:")
print(missing_2014[missing_2014 > 18])
# clean out 2014 data with complete columns to use as input for analysis
input <- data_2014[complete.cases(data_2014), ]
# convert country status to numerical dummy variable
input["status_code"] <- NA
input$status_code[input$status == 'Developed'] <- 1
input$status_code[input$status == 'Developing'] <- 0
# drop unused columns for regression model
input <- input[, !(colnames(input) %in% c('country', 'year', 'status'))]
head(input, 10) #view first 10 rows
write.csv(input, file='data/life_expectancy_input.csv')
str(input)
correlation <- cor(input)
corrplot(correlation, method = 'color')
attach(input)
nullmodel <- lm(life_expectancy~1, data=input)
fullmodel <- lm(life_expectancy~., data=input)
step(nullmodel, data=input, scope=list(upper=fullmodel, lower=nullmodel, direction='both', k=2, test='F'), trace=0)
model1 <- lm(life_expectancy ~ income_comp + adult_mortality + hiv_aids + total_expend)
anova(model1)
summary(model1)
res <- model1$res
runs.test(factor(sign(res)))
model1 <- lm(life_expectancy ~ income_comp + adult_mortality + hiv_aids + total_expend)
anova(model1)
summary(model1)
res <- model1$res
runs.test(factor(sign(res)))
DurbinWatsonTest(model1, alternative="two.sided")
# install.packages("rmarkdown")
# install.packages("readr")
# install.packages("leaps")
# install.packages("corrplot")
# install.packages("tseries")
library(readr)
library(leaps)
library(corrplot)
library(tseries)
library(DescTools)
res <- model1$res
runs.test(factor(sign(res)))
DurbinWatsonTest(model1, alternative="two.sided")
RunsTest(sign(res))
qqnorm(res, xlab="normal scores", ylab="ordered residuals")
qqline(res, lty=2)
res <- model1$res
runs.test(factor(sign(res)))
DurbinWatsonTest(model1, alternative="two.sided")
RunsTest(sign(res))
qqnorm(res, xlab="normal scores", ylab="ordered residuals")
qqline(res, lty=2)
res <- model1$res
runs.test(factor(sign(res)))
DurbinWatsonTest(model1, alternative="two.sided")
RunsTest(sign(res))
qqnorm(res, xlab="normal scores", ylab="ordered residuals")
qqline(res, lty=2)
res <- model1$res
runs.test(factor(sign(res)))
DurbinWatsonTest(model1, alternative="two.sided")
plot(model1$fit, model1$res, xlab="FItted", ylab="Residuals", main="Residuals Against Fitted Values")
abline(h=0, lty=2)
plot(model1$fit, model1$res, xlab="FItted", ylab="Residuals", main="Residuals Against Fitted Values")
abline(h=0, lty=2)
